// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import type { BaseHttpRequest } from './core/BaseHttpRequest';
import type { ListApiKeysResponse, CreateApiKeyData, CreateApiKeyResponse, RevokeApiKeyData, RevokeApiKeyResponse, GetProjectOperationData, GetProjectOperationResponse, ListProjectOperationsData, ListProjectOperationsResponse, ListProjectsData, ListProjectsResponse, CreateProjectData, CreateProjectResponse, ListSharedProjectsData, ListSharedProjectsResponse, GetProjectData, GetProjectResponse, UpdateProjectData, UpdateProjectResponse, DeleteProjectData, DeleteProjectResponse, ListProjectPermissionsData, ListProjectPermissionsResponse, GrantPermissionToProjectData, GrantPermissionToProjectResponse, RevokePermissionFromProjectData, RevokePermissionFromProjectResponse, GetProjectJwksData, GetProjectJwksResponse, AddProjectJwksData, AddProjectJwksResponse, DeleteProjectJwksData, DeleteProjectJwksResponse, GetConnectionUriData, GetConnectionUriResponse, ListProjectVpcEndpointsData, ListProjectVpcEndpointsResponse, AssignProjectVpcEndpointData, AssignProjectVpcEndpointResponse, DeleteProjectVpcEndpointData, DeleteProjectVpcEndpointResponse, CreateProjectIdentityIntegrationData, CreateProjectIdentityIntegrationResponse, CreateProjectIdentityAuthProviderSdkKeysData, CreateProjectIdentityAuthProviderSdkKeysResponse, TransferProjectIdentityAuthProviderProjectData, TransferProjectIdentityAuthProviderProjectResponse, ListProjectIdentityIntegrationsData, ListProjectIdentityIntegrationsResponse2, DeleteProjectIdentityIntegrationData, DeleteProjectIdentityIntegrationResponse, CreateProjectBranchData, CreateProjectBranchResponse, ListProjectBranchesData, ListProjectBranchesResponse, CountProjectBranchesData, CountProjectBranchesResponse, GetProjectBranchData, GetProjectBranchResponse, DeleteProjectBranchData, DeleteProjectBranchResponse, UpdateProjectBranchData, UpdateProjectBranchResponse, RestoreProjectBranchData, RestoreProjectBranchResponse, GetProjectBranchSchemaData, GetProjectBranchSchemaResponse, GetProjectBranchSchemaComparisonData, GetProjectBranchSchemaComparisonResponse, SetDefaultProjectBranchData, SetDefaultProjectBranchResponse, ListProjectBranchEndpointsData, ListProjectBranchEndpointsResponse, ListProjectBranchDatabasesData, ListProjectBranchDatabasesResponse, CreateProjectBranchDatabaseData, CreateProjectBranchDatabaseResponse, GetProjectBranchDatabaseData, GetProjectBranchDatabaseResponse, UpdateProjectBranchDatabaseData, UpdateProjectBranchDatabaseResponse, DeleteProjectBranchDatabaseData, DeleteProjectBranchDatabaseResponse, ListProjectBranchRolesData, ListProjectBranchRolesResponse, CreateProjectBranchRoleData, CreateProjectBranchRoleResponse, GetProjectBranchRoleData, GetProjectBranchRoleResponse, DeleteProjectBranchRoleData, DeleteProjectBranchRoleResponse, GetProjectBranchRolePasswordData, GetProjectBranchRolePasswordResponse, ResetProjectBranchRolePasswordData, ResetProjectBranchRolePasswordResponse, CreateProjectEndpointData, CreateProjectEndpointResponse, ListProjectEndpointsData, ListProjectEndpointsResponse, GetProjectEndpointData, GetProjectEndpointResponse, DeleteProjectEndpointData, DeleteProjectEndpointResponse, UpdateProjectEndpointData, UpdateProjectEndpointResponse, StartProjectEndpointData, StartProjectEndpointResponse, SuspendProjectEndpointData, SuspendProjectEndpointResponse, RestartProjectEndpointData, RestartProjectEndpointResponse, GetConsumptionHistoryPerAccountData, GetConsumptionHistoryPerAccountResponse, GetConsumptionHistoryPerProjectData, GetConsumptionHistoryPerProjectResponse, GetOrganizationData, GetOrganizationResponse, ListOrgApiKeysData, ListOrgApiKeysResponse, CreateOrgApiKeyData, CreateOrgApiKeyResponse, RevokeOrgApiKeyData, RevokeOrgApiKeyResponse, GetOrganizationMembersData, GetOrganizationMembersResponse, GetOrganizationMemberData, GetOrganizationMemberResponse, UpdateOrganizationMemberData, UpdateOrganizationMemberResponse, RemoveOrganizationMemberData, RemoveOrganizationMemberResponse, GetOrganizationInvitationsData, GetOrganizationInvitationsResponse, CreateOrganizationInvitationsData, CreateOrganizationInvitationsResponse, TransferProjectsFromOrgToOrgData, TransferProjectsFromOrgToOrgResponse, ListOrganizationVpcEndpointsData, ListOrganizationVpcEndpointsResponse, GetOrganizationVpcEndpointDetailsData, GetOrganizationVpcEndpointDetailsResponse, AssignOrganizationVpcEndpointData, AssignOrganizationVpcEndpointResponse, DeleteOrganizationVpcEndpointData, DeleteOrganizationVpcEndpointResponse, GetCurrentUserOrganizationsResponse, GetActiveRegionsResponse, GetCurrentUserInfoResponse, TransferProjectsFromUserToOrgData, TransferProjectsFromUserToOrgResponse } from './types.gen';

export class ApiKeyService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * List API keys
     * Retrieves the API keys for your Neon account.
     * The response does not include API key tokens. A token is only provided when creating an API key.
     * API keys can also be managed in the Neon Console.
     * For more information, see [Manage API keys](https://neon.tech/docs/manage/api-keys/).
     *
     * @returns ApiKeysListResponseItem Returned the API keys for the Neon account
     * @throws ApiError
     */
    public listApiKeys(): CancelablePromise<ListApiKeysResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/api_keys',
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Create API key
     * Creates an API key.
     * The `key_name` is a user-specified name for the key.
     * This method returns an `id` and `key`. The `key` is a randomly generated, 64-bit token required to access the Neon API.
     * API keys can also be managed in the Neon Console.
     * See [Manage API keys](https://neon.tech/docs/manage/api-keys/).
     *
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ApiKeyCreateResponse Created an API key
     * @throws ApiError
     */
    public createApiKey(data: CreateApiKeyData): CancelablePromise<CreateApiKeyResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/api_keys',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Revoke API key
     * Revokes the specified API key.
     * An API key that is no longer needed can be revoked.
     * This action cannot be reversed.
     * You can obtain `key_id` values by listing the API keys for your Neon account.
     * API keys can also be managed in the Neon Console.
     * See [Manage API keys](https://neon.tech/docs/manage/api-keys/).
     *
     * @param data The data for the request.
     * @param data.keyId The API key ID
     * @returns ApiKeyRevokeResponse Revoked the specified API key
     * @throws ApiError
     */
    public revokeApiKey(data: RevokeApiKeyData): CancelablePromise<RevokeApiKeyResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/api_keys/{key_id}',
            path: {
                key_id: data.keyId
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
}

export class OperationService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Retrieve operation details
     * Retrieves details for the specified operation.
     * An operation is an action performed on a Neon project resource.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain a `operation_id` by listing operations for the project.
     *
     * @param data The data for the request.
     * @param data.projectId The Neon project ID
     * @param data.operationId The operation ID
     * @returns OperationResponse Returned details for the specified operation
     * @throws ApiError
     */
    public getProjectOperation(data: GetProjectOperationData): CancelablePromise<GetProjectOperationResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/projects/{project_id}/operations/{operation_id}',
            path: {
                project_id: data.projectId,
                operation_id: data.operationId
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * List operations
     * Retrieves a list of operations for the specified Neon project.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * The number of operations returned can be large.
     * To paginate the response, issue an initial request with a `limit` value.
     * Then, add the `cursor` value that was returned in the response to the next request.
     *
     * @param data The data for the request.
     * @param data.projectId The Neon project ID
     * @param data.cursor Specify the cursor value from the previous response to get the next batch of operations
     * @param data.limit Specify a value from 1 to 1000 to limit number of operations in the response
     * @returns unknown Returned a list of operations
     *
     * @throws ApiError
     */
    public listProjectOperations(data: ListProjectOperationsData): CancelablePromise<ListProjectOperationsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/projects/{project_id}/operations',
            path: {
                project_id: data.projectId
            },
            query: {
                cursor: data.cursor,
                limit: data.limit
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
}

export class ProjectService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * List projects
     * Retrieves a list of projects for the Neon account.
     * A project is the top-level object in the Neon object hierarchy.
     * For more information, see [Manage projects](https://neon.tech/docs/manage/projects/).
     *
     * @param data The data for the request.
     * @param data.cursor Specify the cursor value from the previous response to retrieve the next batch of projects.
     * @param data.limit Specify a value from 1 to 400 to limit number of projects in the response.
     * @param data.search Search by project `name` or `id`. You can specify partial `name` or `id` values to filter results.
     * @param data.orgId Search for projects by `org_id`.
     * @param data.timeout Specify an explicit timeout in milliseconds to limit response delay.
     * After timing out, the incomplete list of project data fetched so far will be returned.
     * Projects still being fetched when the timeout occurred are listed in the "unavailable" attribute of the response.
     * If not specified, an implicit implementation defined timeout is chosen with the same behaviour as above
     *
     * @returns unknown Returned a list of projects for the Neon account
     * @throws ApiError
     */
    public listProjects(data: ListProjectsData = {}): CancelablePromise<ListProjectsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/projects',
            query: {
                cursor: data.cursor,
                limit: data.limit,
                search: data.search,
                org_id: data.orgId,
                timeout: data.timeout
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Create project
     * Creates a Neon project.
     * A project is the top-level object in the Neon object hierarchy.
     * Plan limits define how many projects you can create.
     * For more information, see [Manage projects](https://neon.tech/docs/manage/projects/).
     *
     * You can specify a region and Postgres version in the request body.
     * Neon currently supports PostgreSQL 14, 15, 16, and 17.
     * For supported regions and `region_id` values, see [Regions](https://neon.tech/docs/introduction/regions/).
     *
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Created a project.
     * The project includes a connection URI with a database, password, and role.
     * At least one non-protected role is created with a password.
     * Wait until the operations are finished before attempting to connect to a project database.
     *
     * @throws ApiError
     */
    public createProject(data: CreateProjectData): CancelablePromise<CreateProjectResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/projects',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * List shared projects
     * Retrieves a list of shared projects for the Neon account.
     * A project is the top-level object in the Neon object hierarchy.
     * For more information, see [Manage projects](https://neon.tech/docs/manage/projects/).
     *
     * @param data The data for the request.
     * @param data.cursor Specify the cursor value from the previous response to get the next batch of projects.
     * @param data.limit Specify a value from 1 to 400 to limit number of projects in the response.
     * @param data.search Search query by name or id.
     * @param data.timeout Specify an explicit timeout in milliseconds to limit response delay.
     * After timing out, the incomplete list of project data fetched so far will be returned.
     * Projects still being fetched when the timeout occurred are listed in the "unavailable" attribute of the response.
     * If not specified, an implicit implementation defined timeout is chosen with the same behaviour as above
     *
     * @returns unknown Returned a list of shared projects for the Neon account
     * @throws ApiError
     */
    public listSharedProjects(data: ListSharedProjectsData = {}): CancelablePromise<ListSharedProjectsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/projects/shared',
            query: {
                cursor: data.cursor,
                limit: data.limit,
                search: data.search,
                timeout: data.timeout
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Retrieve project details
     * Retrieves information about the specified project.
     * A project is the top-level object in the Neon object hierarchy.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     *
     * @param data The data for the request.
     * @param data.projectId The Neon project ID
     * @returns ProjectResponse Returned information about the specified project
     * @throws ApiError
     */
    public getProject(data: GetProjectData): CancelablePromise<GetProjectResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/projects/{project_id}',
            path: {
                project_id: data.projectId
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Update project
     * Updates the specified project.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     *
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.projectId The Neon project ID
     * @returns unknown Updated the specified project
     * @throws ApiError
     */
    public updateProject(data: UpdateProjectData): CancelablePromise<UpdateProjectResponse> {
        return this.httpRequest.request({
            method: 'PATCH',
            url: '/projects/{project_id}',
            path: {
                project_id: data.projectId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Delete project
     * Deletes the specified project.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * Deleting a project is a permanent action.
     * Deleting a project also deletes endpoints, branches, databases, and users that belong to the project.
     *
     * @param data The data for the request.
     * @param data.projectId The Neon project ID
     * @returns ProjectResponse Deleted the specified project
     * @throws ApiError
     */
    public deleteProject(data: DeleteProjectData): CancelablePromise<DeleteProjectResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/projects/{project_id}',
            path: {
                project_id: data.projectId
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * List project access
     * Retrieves details about users who have access to the project, including the permission `id`, the granted-to email address, and the date project access was granted.
     * @param data The data for the request.
     * @param data.projectId
     * @returns ProjectPermissions Returned project access details
     * @throws ApiError
     */
    public listProjectPermissions(data: ListProjectPermissionsData): CancelablePromise<ListProjectPermissionsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/projects/{project_id}/permissions',
            path: {
                project_id: data.projectId
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Grant project access
     * Grants project access to the account associated with the specified email address
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.projectId
     * @returns ProjectPermission Granted project access
     * @throws ApiError
     */
    public grantPermissionToProject(data: GrantPermissionToProjectData): CancelablePromise<GrantPermissionToProjectResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/projects/{project_id}/permissions',
            path: {
                project_id: data.projectId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Revoke project access
     * Revokes project access from the user associated with the specified permission `id`. You can retrieve a user's permission `id` by listing project access.
     * @param data The data for the request.
     * @param data.projectId
     * @param data.permissionId
     * @returns ProjectPermission Revoked project access
     * @throws ApiError
     */
    public revokePermissionFromProject(data: RevokePermissionFromProjectData): CancelablePromise<RevokePermissionFromProjectResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/projects/{project_id}/permissions/{permission_id}',
            path: {
                project_id: data.projectId,
                permission_id: data.permissionId
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * List JWKS URLs
     * Returns the JWKS URLs available for verifying JWTs used as the authentication mechanism for the specified project.
     *
     * @param data The data for the request.
     * @param data.projectId The Neon project ID
     * @returns ProjectJWKSResponse The JWKS URLs available for the project
     * @throws ApiError
     */
    public getProjectJwks(data: GetProjectJwksData): CancelablePromise<GetProjectJwksResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/projects/{project_id}/jwks',
            path: {
                project_id: data.projectId
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Add JWKS URL
     * Add a new JWKS URL to a project, such that it can be used for verifying JWTs used as the authentication mechanism for the specified project.
     *
     * The URL must be a valid HTTPS URL that returns a JSON Web Key Set.
     *
     * The `provider_name` field allows you to specify which authentication provider you're using (e.g., Clerk, Auth0, AWS Cognito, etc.).
     *
     * The `branch_id` can be used to specify on which branches the JWKS URL will be accepted. If not specified, then it will work on any branch.
     *
     * The `role_names` can be used to specify for which roles the JWKS URL will be accepted.
     *
     * The `jwt_audience` can be used to specify which "aud" values should be accepted by Neon in the JWTs that are used for authentication.
     *
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.projectId The Neon project ID
     * @returns JWKSCreationOperation The JWKS URL was added to the project's authentication connections
     * @throws ApiError
     */
    public addProjectJwks(data: AddProjectJwksData): CancelablePromise<AddProjectJwksResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/projects/{project_id}/jwks',
            path: {
                project_id: data.projectId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Delete JWKS URL
     * Deletes a JWKS URL from the specified project
     * @param data The data for the request.
     * @param data.projectId The Neon project ID
     * @param data.jwksId The JWKS ID
     * @returns JWKS Deleted a JWKS URL from the project
     * @throws ApiError
     */
    public deleteProjectJwks(data: DeleteProjectJwksData): CancelablePromise<DeleteProjectJwksResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/projects/{project_id}/jwks/{jwks_id}',
            path: {
                project_id: data.projectId,
                jwks_id: data.jwksId
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Retrieve connection URI
     * Retrieves a connection URI for the specified database.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain the `database_name` by listing the databases for a branch.
     * You can obtain a `role_name` by listing the roles for a branch.
     *
     * @param data The data for the request.
     * @param data.projectId The Neon project ID
     * @param data.databaseName The database name
     * @param data.roleName The role name
     * @param data.branchId The branch ID. Defaults to your project's default `branch_id` if not specified.
     * @param data.endpointId The endpoint ID. Defaults to the read-write `endpoint_id` associated with the `branch_id` if not specified.
     * @param data.pooled Adds the `-pooler` option to the connection URI when set to `true`, creating a pooled connection URI.
     * @returns ConnectionURIResponse Returned the connection URI
     * @throws ApiError
     */
    public getConnectionUri(data: GetConnectionUriData): CancelablePromise<GetConnectionUriResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/projects/{project_id}/connection_uri',
            path: {
                project_id: data.projectId
            },
            query: {
                branch_id: data.branchId,
                endpoint_id: data.endpointId,
                database_name: data.databaseName,
                role_name: data.roleName,
                pooled: data.pooled
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * List VPC endpoint restrictions
     * Lists VPC endpoint restrictions for the specified Neon project.
     *
     * @param data The data for the request.
     * @param data.projectId The Neon project ID
     * @returns VPCEndpointsResponse Returned VPC endpoint restrictions for the specified project
     * @throws ApiError
     */
    public listProjectVpcEndpoints(data: ListProjectVpcEndpointsData): CancelablePromise<ListProjectVpcEndpointsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/projects/{project_id}/vpc_endpoints',
            path: {
                project_id: data.projectId
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Set VPC endpoint restriction
     * Sets or updates a VPC endpoint restriction for a Neon project.
     * When a VPC endpoint restriction is set, the project only accepts connections
     * from the specified VPC.
     * A VPC endpoint can be set as a restriction only after it is assigned to the
     * parent organization of the Neon project.
     *
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.projectId The Neon project ID
     * @param data.vpcEndpointId The VPC endpoint ID
     * @returns unknown Configured the specified VPC endpoint as a restriction for the specified project.
     * @throws ApiError
     */
    public assignProjectVpcEndpoint(data: AssignProjectVpcEndpointData): CancelablePromise<AssignProjectVpcEndpointResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/projects/{project_id}/vpc_endpoints/{vpc_endpoint_id}',
            path: {
                project_id: data.projectId,
                vpc_endpoint_id: data.vpcEndpointId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Delete VPC endpoint restriction
     * Removes the specified VPC endpoint restriction from a Neon project.
     *
     * @param data The data for the request.
     * @param data.projectId The Neon project ID
     * @param data.vpcEndpointId The VPC endpoint ID
     * @returns unknown Removed the VPC endpoint restriction from the specified Neon project
     * @throws ApiError
     */
    public deleteProjectVpcEndpoint(data: DeleteProjectVpcEndpointData): CancelablePromise<DeleteProjectVpcEndpointResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/projects/{project_id}/vpc_endpoints/{vpc_endpoint_id}',
            path: {
                project_id: data.projectId,
                vpc_endpoint_id: data.vpcEndpointId
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
}

export class AuthService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Create Neon Auth integration
     * Creates a project on a third-party authentication provider's platform for use with Neon Auth.
     * Use this endpoint if the frontend integration flow can't be used.
     *
     * @param data The data for the request.
     * @param data.requestBody
     * @returns IdentityCreateIntegrationResponse Creates Neon Auth integration
     * @throws ApiError
     */
    public createProjectIdentityIntegration(data: CreateProjectIdentityIntegrationData): CancelablePromise<CreateProjectIdentityIntegrationResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/projects/auth/create',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Create Auth Provider SDK keys
     * Generates SDK or API Keys for the auth provider. These might be called different things depending
     * on the auth provider you're using, but are generally used for setting up the frontend and backend SDKs.
     *
     * @param data The data for the request.
     * @param data.requestBody
     * @returns IdentityCreateIntegrationResponse Creates Auth Provider SDK keys
     * @throws ApiError
     */
    public createProjectIdentityAuthProviderSdkKeys(data: CreateProjectIdentityAuthProviderSdkKeysData): CancelablePromise<CreateProjectIdentityAuthProviderSdkKeysResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/projects/auth/keys',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Transfer Neon-managed auth project to your own account
     * Transfer ownership of your Neon-managed auth project to your own auth provider account.
     *
     * @param data The data for the request.
     * @param data.requestBody
     * @returns IdentityTransferAuthProviderProjectResponse Transfer initiated. Follow the URL to complete the process in your auth provider's UI.
     * @throws ApiError
     */
    public transferProjectIdentityAuthProviderProject(data: TransferProjectIdentityAuthProviderProjectData): CancelablePromise<TransferProjectIdentityAuthProviderProjectResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/projects/auth/transfer_ownership',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Lists active integrations with auth providers
     * @param data The data for the request.
     * @param data.projectId The Neon project ID
     * @returns ListProjectIdentityIntegrationsResponse Return management API keys metadata
     * @throws ApiError
     */
    public listProjectIdentityIntegrations(data: ListProjectIdentityIntegrationsData): CancelablePromise<ListProjectIdentityIntegrationsResponse2> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/projects/{project_id}/auth/integrations',
            path: {
                project_id: data.projectId
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Delete integration with auth provider
     * @param data The data for the request.
     * @param data.projectId The Neon project ID
     * @param data.authProvider The authentication provider name
     * @returns unknown Delete the integration with the authentication provider
     * @throws ApiError
     */
    public deleteProjectIdentityIntegration(data: DeleteProjectIdentityIntegrationData): CancelablePromise<DeleteProjectIdentityIntegrationResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/projects/{project_id}/auth/integration/{auth_provider}',
            path: {
                project_id: data.projectId,
                auth_provider: data.authProvider
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
}

export class BranchService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Create branch
     * Creates a branch in the specified project.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     *
     * This method does not require a request body, but you can specify one to create a compute endpoint for the branch or to select a non-default parent branch.
     * The default behavior is to create a branch from the project's default branch with no compute endpoint, and the branch name is auto-generated.
     * There is a maximum of one read-write endpoint per branch.
     * A branch can have multiple read-only endpoints.
     * For related information, see [Manage branches](https://neon.tech/docs/manage/branches/).
     *
     * @param data The data for the request.
     * @param data.projectId The Neon project ID
     * @param data.requestBody
     * @returns unknown Created a branch. An endpoint is only created if it was specified in the request.
     * @throws ApiError
     */
    public createProjectBranch(data: CreateProjectBranchData): CancelablePromise<CreateProjectBranchResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/projects/{project_id}/branches',
            path: {
                project_id: data.projectId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * List branches
     * Retrieves a list of branches for the specified project.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     *
     * Each Neon project has a root branch named `main`.
     * A `branch_id` value has a `br-` prefix.
     * A project may contain child branches that were branched from `main` or from another branch.
     * A parent branch is identified by the `parent_id` value, which is the `id` of the parent branch.
     * For related information, see [Manage branches](https://neon.tech/docs/manage/branches/).
     *
     * @param data The data for the request.
     * @param data.projectId The Neon project ID
     * @param data.search Search by branch `name` or `id`. You can specify partial `name` or `id` values to filter results.
     * @param data.sortBy Sort the branches by sort_field. If not provided, branches will be sorted by updated_at descending order
     * @param data.cursor A cursor to use in pagination. A cursor defines your place in the data list. Include `response.pagination.next` in subsequent API calls to fetch next page of the list.
     * @param data.sortOrder Defines the sorting order of entities.
     * @param data.limit The maximum number of records to be returned in the response
     * @returns unknown Returned a list of branches for the specified project
     * @throws ApiError
     */
    public listProjectBranches(data: ListProjectBranchesData): CancelablePromise<ListProjectBranchesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/projects/{project_id}/branches',
            path: {
                project_id: data.projectId
            },
            query: {
                search: data.search,
                sort_by: data.sortBy,
                cursor: data.cursor,
                sort_order: data.sortOrder,
                limit: data.limit
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Retrieve number of branches
     * Retrieves the total number of branches in the specified project.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     *
     * @param data The data for the request.
     * @param data.projectId The Neon project ID
     * @param data.search Count branches matching the `name` in search query
     * @returns unknown Returned a count of branches for the specified project
     * @throws ApiError
     */
    public countProjectBranches(data: CountProjectBranchesData): CancelablePromise<CountProjectBranchesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/projects/{project_id}/branches/count',
            path: {
                project_id: data.projectId
            },
            query: {
                search: data.search
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Retrieve branch details
     * Retrieves information about the specified branch.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain a `branch_id` by listing the project's branches.
     * A `branch_id` value has a `br-` prefix.
     *
     * Each Neon project is initially created with a root and default branch named `main`.
     * A project can contain one or more branches.
     * A parent branch is identified by a `parent_id` value, which is the `id` of the parent branch.
     * For related information, see [Manage branches](https://neon.tech/docs/manage/branches/).
     *
     * @param data The data for the request.
     * @param data.projectId The Neon project ID
     * @param data.branchId The branch ID
     * @returns unknown Returned information about the specified branch
     * @throws ApiError
     */
    public getProjectBranch(data: GetProjectBranchData): CancelablePromise<GetProjectBranchResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/projects/{project_id}/branches/{branch_id}',
            path: {
                project_id: data.projectId,
                branch_id: data.branchId
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Delete branch
     * Deletes the specified branch from a project, and places
     * all compute endpoints into an idle state, breaking existing client connections.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain a `branch_id` by listing the project's branches.
     * For related information, see [Manage branches](https://neon.tech/docs/manage/branches/).
     *
     * When a successful response status is received, the compute endpoints are still active,
     * and the branch is not yet deleted from storage.
     * The deletion occurs after all operations finish.
     * You cannot delete a project's root or default branch, and you cannot delete a branch that has a child branch.
     * A project must have at least one branch.
     *
     * @param data The data for the request.
     * @param data.projectId The Neon project ID
     * @param data.branchId The branch ID
     * @returns BranchOperations Deleted the specified branch
     * @returns void Returned if the branch doesn't exist or has already been deleted
     * @throws ApiError
     */
    public deleteProjectBranch(data: DeleteProjectBranchData): CancelablePromise<DeleteProjectBranchResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/projects/{project_id}/branches/{branch_id}',
            path: {
                project_id: data.projectId,
                branch_id: data.branchId
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Update branch
     * Updates the specified branch.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain the `branch_id` by listing the project's branches.
     * For more information, see [Manage branches](https://neon.tech/docs/manage/branches/).
     *
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.projectId The Neon project ID
     * @param data.branchId The branch ID
     * @returns BranchOperations Updated the specified branch
     * @throws ApiError
     */
    public updateProjectBranch(data: UpdateProjectBranchData): CancelablePromise<UpdateProjectBranchResponse> {
        return this.httpRequest.request({
            method: 'PATCH',
            url: '/projects/{project_id}/branches/{branch_id}',
            path: {
                project_id: data.projectId,
                branch_id: data.branchId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Restore branch
     * Restores a branch to an earlier state in its own or another branch's history
     * @param data The data for the request.
     * @param data.projectId The Neon project ID
     * @param data.branchId The branch ID
     * @param data.requestBody
     * @returns BranchOperations Updated the specified branch
     * @throws ApiError
     */
    public restoreProjectBranch(data: RestoreProjectBranchData): CancelablePromise<RestoreProjectBranchResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/projects/{project_id}/branches/{branch_id}/restore',
            path: {
                project_id: data.projectId,
                branch_id: data.branchId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Retrieve database schema
     * Retrieves the schema from the specified database. The `lsn` and `timestamp` values cannot be specified at the same time. If both are omitted, the database schema is retrieved from database's head.
     * @param data The data for the request.
     * @param data.projectId The Neon project ID
     * @param data.branchId The branch ID
     * @param data.dbName Name of the database for which the schema is retrieved
     * @param data.lsn The Log Sequence Number (LSN) for which the schema is retrieved
     *
     * @param data.timestamp The point in time for which the schema is retrieved
     *
     * @returns BranchSchemaResponse Schema definition
     * @throws ApiError
     */
    public getProjectBranchSchema(data: GetProjectBranchSchemaData): CancelablePromise<GetProjectBranchSchemaResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/projects/{project_id}/branches/{branch_id}/schema',
            path: {
                project_id: data.projectId,
                branch_id: data.branchId
            },
            query: {
                db_name: data.dbName,
                lsn: data.lsn,
                timestamp: data.timestamp
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Compare database schema
     * Compares the schema from the specified database with another branch's schema.
     * @param data The data for the request.
     * @param data.projectId The Neon project ID
     * @param data.branchId The branch ID
     * @param data.dbName Name of the database for which the schema is retrieved
     * @param data.baseBranchId The branch ID to compare the schema with
     * @param data.lsn The Log Sequence Number (LSN) for which the schema is retrieved
     *
     * @param data.timestamp The point in time for which the schema is retrieved
     *
     * @param data.baseLsn The Log Sequence Number (LSN) for the base branch schema
     *
     * @param data.baseTimestamp The point in time for the base branch schema
     *
     * @returns BranchSchemaCompareResponse Difference between the schemas
     * @throws ApiError
     */
    public getProjectBranchSchemaComparison(data: GetProjectBranchSchemaComparisonData): CancelablePromise<GetProjectBranchSchemaComparisonResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/projects/{project_id}/branches/{branch_id}/compare_schema',
            path: {
                project_id: data.projectId,
                branch_id: data.branchId
            },
            query: {
                base_branch_id: data.baseBranchId,
                db_name: data.dbName,
                lsn: data.lsn,
                timestamp: data.timestamp,
                base_lsn: data.baseLsn,
                base_timestamp: data.baseTimestamp
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Set branch as default
     * Sets the specified branch as the project's default branch.
     * The default designation is automatically removed from the previous default branch.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain the `branch_id` by listing the project's branches.
     * For more information, see [Manage branches](https://neon.tech/docs/manage/branches/).
     *
     * @param data The data for the request.
     * @param data.projectId The Neon project ID
     * @param data.branchId The branch ID
     * @returns BranchOperations Updated the specified branch
     * @throws ApiError
     */
    public setDefaultProjectBranch(data: SetDefaultProjectBranchData): CancelablePromise<SetDefaultProjectBranchResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/projects/{project_id}/branches/{branch_id}/set_as_default',
            path: {
                project_id: data.projectId,
                branch_id: data.branchId
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * List branch endpoints
     * Retrieves a list of compute endpoints for the specified branch.
     * Neon permits only one read-write compute endpoint per branch.
     * A branch can have multiple read-only compute endpoints.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain the `branch_id` by listing the project's branches.
     *
     * @param data The data for the request.
     * @param data.projectId The Neon project ID
     * @param data.branchId The branch ID
     * @returns EndpointsResponse Returned a list of endpoints for the specified branch
     * @throws ApiError
     */
    public listProjectBranchEndpoints(data: ListProjectBranchEndpointsData): CancelablePromise<ListProjectBranchEndpointsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/projects/{project_id}/branches/{branch_id}/endpoints',
            path: {
                project_id: data.projectId,
                branch_id: data.branchId
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * List databases
     * Retrieves a list of databases for the specified branch.
     * A branch can have multiple databases.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain the `branch_id` by listing the project's branches.
     * For related information, see [Manage databases](https://neon.tech/docs/manage/databases/).
     *
     * @param data The data for the request.
     * @param data.projectId The Neon project ID
     * @param data.branchId The branch ID
     * @returns DatabasesResponse Returned a list of databases of the specified branch
     * @throws ApiError
     */
    public listProjectBranchDatabases(data: ListProjectBranchDatabasesData): CancelablePromise<ListProjectBranchDatabasesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/projects/{project_id}/branches/{branch_id}/databases',
            path: {
                project_id: data.projectId,
                branch_id: data.branchId
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Create database
     * Creates a database in the specified branch.
     * A branch can have multiple databases.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain the `branch_id` by listing the project's branches.
     * For related information, see [Manage databases](https://neon.tech/docs/manage/databases/).
     *
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.projectId The Neon project ID
     * @param data.branchId The branch ID
     * @returns DatabaseOperations Created a database in the specified branch
     * @throws ApiError
     */
    public createProjectBranchDatabase(data: CreateProjectBranchDatabaseData): CancelablePromise<CreateProjectBranchDatabaseResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/projects/{project_id}/branches/{branch_id}/databases',
            path: {
                project_id: data.projectId,
                branch_id: data.branchId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Retrieve database details
     * Retrieves information about the specified database.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain the `branch_id` and `database_name` by listing the branch's databases.
     * For related information, see [Manage databases](https://neon.tech/docs/manage/databases/).
     *
     * @param data The data for the request.
     * @param data.projectId The Neon project ID
     * @param data.branchId The branch ID
     * @param data.databaseName The database name
     * @returns DatabaseResponse Returned the database details
     * @throws ApiError
     */
    public getProjectBranchDatabase(data: GetProjectBranchDatabaseData): CancelablePromise<GetProjectBranchDatabaseResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/projects/{project_id}/branches/{branch_id}/databases/{database_name}',
            path: {
                project_id: data.projectId,
                branch_id: data.branchId,
                database_name: data.databaseName
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Update database
     * Updates the specified database in the branch.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain the `branch_id` and `database_name` by listing the branch's databases.
     * For related information, see [Manage databases](https://neon.tech/docs/manage/databases/).
     *
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.projectId The Neon project ID
     * @param data.branchId The branch ID
     * @param data.databaseName The database name
     * @returns DatabaseOperations Updated the database
     * @throws ApiError
     */
    public updateProjectBranchDatabase(data: UpdateProjectBranchDatabaseData): CancelablePromise<UpdateProjectBranchDatabaseResponse> {
        return this.httpRequest.request({
            method: 'PATCH',
            url: '/projects/{project_id}/branches/{branch_id}/databases/{database_name}',
            path: {
                project_id: data.projectId,
                branch_id: data.branchId,
                database_name: data.databaseName
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Delete database
     * Deletes the specified database from the branch.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain the `branch_id` and `database_name` by listing the branch's databases.
     * For related information, see [Manage databases](https://neon.tech/docs/manage/databases/).
     *
     * @param data The data for the request.
     * @param data.projectId The Neon project ID
     * @param data.branchId The branch ID
     * @param data.databaseName The database name
     * @returns DatabaseOperations Deleted the specified database
     * @returns void Returned if the database doesn't exist or has already been deleted
     * @throws ApiError
     */
    public deleteProjectBranchDatabase(data: DeleteProjectBranchDatabaseData): CancelablePromise<DeleteProjectBranchDatabaseResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/projects/{project_id}/branches/{branch_id}/databases/{database_name}',
            path: {
                project_id: data.projectId,
                branch_id: data.branchId,
                database_name: data.databaseName
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * List roles
     * Retrieves a list of Postgres roles from the specified branch.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain the `branch_id` by listing the project's branches.
     * For related information, see [Manage roles](https://neon.tech/docs/manage/roles/).
     *
     * @param data The data for the request.
     * @param data.projectId The Neon project ID
     * @param data.branchId The branch ID
     * @returns RolesResponse Returned a list of roles from the specified branch.
     * @throws ApiError
     */
    public listProjectBranchRoles(data: ListProjectBranchRolesData): CancelablePromise<ListProjectBranchRolesResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/projects/{project_id}/branches/{branch_id}/roles',
            path: {
                project_id: data.projectId,
                branch_id: data.branchId
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Create role
     * Creates a Postgres role in the specified branch.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain the `branch_id` by listing the project's branches.
     * For related information, see [Manage roles](https://neon.tech/docs/manage/roles/).
     *
     * Connections established to the active compute endpoint will be dropped.
     * If the compute endpoint is idle, the endpoint becomes active for a short period of time and is suspended afterward.
     *
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.projectId The Neon project ID
     * @param data.branchId The branch ID
     * @returns RoleOperations Created a role in the specified branch
     * @throws ApiError
     */
    public createProjectBranchRole(data: CreateProjectBranchRoleData): CancelablePromise<CreateProjectBranchRoleResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/projects/{project_id}/branches/{branch_id}/roles',
            path: {
                project_id: data.projectId,
                branch_id: data.branchId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Retrieve role details
     * Retrieves details about the specified role.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain the `branch_id` by listing the project's branches.
     * You can obtain the `role_name` by listing the roles for a branch.
     * In Neon, the terms "role" and "user" are synonymous.
     * For related information, see [Manage roles](https://neon.tech/docs/manage/roles/).
     *
     * @param data The data for the request.
     * @param data.projectId The Neon project ID
     * @param data.branchId The branch ID
     * @param data.roleName The role name
     * @returns RoleResponse Returned details for the specified role
     * @throws ApiError
     */
    public getProjectBranchRole(data: GetProjectBranchRoleData): CancelablePromise<GetProjectBranchRoleResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/projects/{project_id}/branches/{branch_id}/roles/{role_name}',
            path: {
                project_id: data.projectId,
                branch_id: data.branchId,
                role_name: data.roleName
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Delete role
     * Deletes the specified Postgres role from the branch.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain the `branch_id` by listing the project's branches.
     * You can obtain the `role_name` by listing the roles for a branch.
     * For related information, see [Manage roles](https://neon.tech/docs/manage/roles/).
     *
     * @param data The data for the request.
     * @param data.projectId The Neon project ID
     * @param data.branchId The branch ID
     * @param data.roleName The role name
     * @returns RoleOperations Deleted the specified role from the branch
     * @returns void Returned if the role doesn't exist or has already been deleted
     * @throws ApiError
     */
    public deleteProjectBranchRole(data: DeleteProjectBranchRoleData): CancelablePromise<DeleteProjectBranchRoleResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/projects/{project_id}/branches/{branch_id}/roles/{role_name}',
            path: {
                project_id: data.projectId,
                branch_id: data.branchId,
                role_name: data.roleName
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Retrieve role password
     * Retrieves the password for the specified Postgres role, if possible.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain the `branch_id` by listing the project's branches.
     * You can obtain the `role_name` by listing the roles for a branch.
     * For related information, see [Manage roles](https://neon.tech/docs/manage/roles/).
     *
     * @param data The data for the request.
     * @param data.projectId The Neon project ID
     * @param data.branchId The branch ID
     * @param data.roleName The role name
     * @returns RolePasswordResponse Returned password for the specified role
     * @throws ApiError
     */
    public getProjectBranchRolePassword(data: GetProjectBranchRolePasswordData): CancelablePromise<GetProjectBranchRolePasswordResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/projects/{project_id}/branches/{branch_id}/roles/{role_name}/reveal_password',
            path: {
                project_id: data.projectId,
                branch_id: data.branchId,
                role_name: data.roleName
            },
            errors: {
                404: 'Role not found',
                412: 'Storing passwords is disabled',
                default: 'General Error'
            }
        });
    }
    
    /**
     * Reset role password
     * Resets the password for the specified Postgres role.
     * Returns a new password and operations. The new password is ready to use when the last operation finishes.
     * The old password remains valid until last operation finishes.
     * Connections to the compute endpoint are dropped. If idle,
     * the compute endpoint becomes active for a short period of time.
     *
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain the `branch_id` by listing the project's branches.
     * You can obtain the `role_name` by listing the roles for a branch.
     * For related information, see [Manage roles](https://neon.tech/docs/manage/roles/).
     *
     * @param data The data for the request.
     * @param data.projectId The Neon project ID
     * @param data.branchId The branch ID
     * @param data.roleName The role nam
     * @returns RoleOperations Reset the password for the specified role
     * @throws ApiError
     */
    public resetProjectBranchRolePassword(data: ResetProjectBranchRolePasswordData): CancelablePromise<ResetProjectBranchRolePasswordResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/projects/{project_id}/branches/{branch_id}/roles/{role_name}/reset_password',
            path: {
                project_id: data.projectId,
                branch_id: data.branchId,
                role_name: data.roleName
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
}

export class EndpointService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Create compute endpoint
     * Creates a compute endpoint for the specified branch.
     * An endpoint is a Neon compute instance.
     * There is a maximum of one read-write compute endpoint per branch.
     * If the specified branch already has a read-write compute endpoint, the operation fails.
     * A branch can have multiple read-only compute endpoints.
     *
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain `branch_id` by listing the project's branches.
     * A `branch_id` has a `br-` prefix.
     * For supported regions and `region_id` values, see [Regions](https://neon.tech/docs/introduction/regions/).
     * For more information about compute endpoints, see [Manage computes](https://neon.tech/docs/manage/endpoints/).
     *
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.projectId The Neon project ID
     * @returns EndpointOperations Created a compute endpoint
     * @throws ApiError
     */
    public createProjectEndpoint(data: CreateProjectEndpointData): CancelablePromise<CreateProjectEndpointResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/projects/{project_id}/endpoints',
            path: {
                project_id: data.projectId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * List compute endpoints
     * Retrieves a list of compute endpoints for the specified project.
     * A compute endpoint is a Neon compute instance.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * For information about compute endpoints, see [Manage computes](https://neon.tech/docs/manage/endpoints/).
     *
     * @param data The data for the request.
     * @param data.projectId The Neon project ID
     * @returns EndpointsResponse Returned a list of endpoints for the specified project
     * @throws ApiError
     */
    public listProjectEndpoints(data: ListProjectEndpointsData): CancelablePromise<ListProjectEndpointsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/projects/{project_id}/endpoints',
            path: {
                project_id: data.projectId
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Retrieve compute endpoint details
     * Retrieves information about the specified compute endpoint.
     * A compute endpoint is a Neon compute instance.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain an `endpoint_id` by listing your project's compute endpoints.
     * An `endpoint_id` has an `ep-` prefix.
     * For information about compute endpoints, see [Manage computes](https://neon.tech/docs/manage/endpoints/).
     *
     * @param data The data for the request.
     * @param data.projectId The Neon project ID
     * @param data.endpointId The endpoint ID
     * @returns EndpointResponse Returned information about the specified endpoint
     * @throws ApiError
     */
    public getProjectEndpoint(data: GetProjectEndpointData): CancelablePromise<GetProjectEndpointResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/projects/{project_id}/endpoints/{endpoint_id}',
            path: {
                project_id: data.projectId,
                endpoint_id: data.endpointId
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Delete compute endpoint
     * Delete the specified compute endpoint.
     * A compute endpoint is a Neon compute instance.
     * Deleting a compute endpoint drops existing network connections to the compute endpoint.
     * The deletion is completed when last operation in the chain finishes successfully.
     *
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain an `endpoint_id` by listing your project's compute endpoints.
     * An `endpoint_id` has an `ep-` prefix.
     * For information about compute endpoints, see [Manage computes](https://neon.tech/docs/manage/endpoints/).
     *
     * @param data The data for the request.
     * @param data.projectId The Neon project ID
     * @param data.endpointId The endpoint ID
     * @returns EndpointOperations Deleted the specified compute endpoint
     * @returns void Returned if the endpoint doesn't exist or has already been deleted
     * @throws ApiError
     */
    public deleteProjectEndpoint(data: DeleteProjectEndpointData): CancelablePromise<DeleteProjectEndpointResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/projects/{project_id}/endpoints/{endpoint_id}',
            path: {
                project_id: data.projectId,
                endpoint_id: data.endpointId
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Update compute endpoint
     * Updates the specified compute endpoint.
     *
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain an `endpoint_id` and `branch_id` by listing your project's compute endpoints.
     * An `endpoint_id` has an `ep-` prefix. A `branch_id` has a `br-` prefix.
     * For more information about compute endpoints, see [Manage computes](https://neon.tech/docs/manage/endpoints/).
     *
     * If the returned list of operations is not empty, the compute endpoint is not ready to use.
     * The client must wait for the last operation to finish before using the compute endpoint.
     * If the compute endpoint was idle before the update, it becomes active for a short period of time,
     * and the control plane suspends it again after the update.
     *
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.projectId The Neon project ID
     * @param data.endpointId The endpoint ID
     * @returns EndpointOperations Updated the specified compute endpoint
     * @throws ApiError
     */
    public updateProjectEndpoint(data: UpdateProjectEndpointData): CancelablePromise<UpdateProjectEndpointResponse> {
        return this.httpRequest.request({
            method: 'PATCH',
            url: '/projects/{project_id}/endpoints/{endpoint_id}',
            path: {
                project_id: data.projectId,
                endpoint_id: data.endpointId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Start compute endpoint
     * Starts a compute endpoint. The compute endpoint is ready to use
     * after the last operation in chain finishes successfully.
     *
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain an `endpoint_id` by listing your project's compute endpoints.
     * An `endpoint_id` has an `ep-` prefix.
     * For information about compute endpoints, see [Manage computes](https://neon.tech/docs/manage/endpoints/).
     *
     * @param data The data for the request.
     * @param data.projectId The Neon project ID
     * @param data.endpointId The endpoint ID
     * @returns EndpointOperations Started the specified compute endpoint
     * @throws ApiError
     */
    public startProjectEndpoint(data: StartProjectEndpointData): CancelablePromise<StartProjectEndpointResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/projects/{project_id}/endpoints/{endpoint_id}/start',
            path: {
                project_id: data.projectId,
                endpoint_id: data.endpointId
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Suspend compute endpoint
     * Suspend the specified compute endpoint
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain an `endpoint_id` by listing your project's compute endpoints.
     * An `endpoint_id` has an `ep-` prefix.
     * For information about compute endpoints, see [Manage computes](https://neon.tech/docs/manage/endpoints/).
     *
     * @param data The data for the request.
     * @param data.projectId The Neon project ID
     * @param data.endpointId The endpoint ID
     * @returns EndpointOperations Suspended the specified endpoint
     * @throws ApiError
     */
    public suspendProjectEndpoint(data: SuspendProjectEndpointData): CancelablePromise<SuspendProjectEndpointResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/projects/{project_id}/endpoints/{endpoint_id}/suspend',
            path: {
                project_id: data.projectId,
                endpoint_id: data.endpointId
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Restart compute endpoint
     * Restart the specified compute endpoint: suspend immediately followed by start operations.
     * You can obtain a `project_id` by listing the projects for your Neon account.
     * You can obtain an `endpoint_id` by listing your project's compute endpoints.
     * An `endpoint_id` has an `ep-` prefix.
     * For information about compute endpoints, see [Manage computes](https://neon.tech/docs/manage/endpoints/).
     *
     * @param data The data for the request.
     * @param data.projectId The Neon project ID
     * @param data.endpointId The endpoint ID
     * @returns EndpointOperations Restarted endpoint
     * @throws ApiError
     */
    public restartProjectEndpoint(data: RestartProjectEndpointData): CancelablePromise<RestartProjectEndpointResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/projects/{project_id}/endpoints/{endpoint_id}/restart',
            path: {
                project_id: data.projectId,
                endpoint_id: data.endpointId
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
}

export class ConsumptionService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Retrieve account consumption metrics
     * Retrieves consumption metrics for Scale, Business, and Enterprise plan accounts. History begins at the time of upgrade.
     *
     * @param data The data for the request.
     * @param data.from Specify the start `date-time` for the consumption period.
     * The `date-time` value is rounded according to the specified `granularity`.
     * For example, `2024-03-15T15:30:00Z` for `daily` granularity will be rounded to `2024-03-15T00:00:00Z`.
     * The specified `date-time` value must respect the specified granularity:
     * - For `hourly`, consumption metrics are limited to the last 168 hours.
     * - For `daily`, consumption metrics are limited to the last 60 days.
     * - For `monthly`, consumption metrics are limited to the past year.
     *
     * The consumption history is available starting from `March 1, 2024, at 00:00:00 UTC`.
     *
     * @param data.to Specify the end `date-time` for the consumption period.
     * The `date-time` value is rounded according to the specified granularity.
     * For example, `2024-03-15T15:30:00Z` for `daily` granularity will be rounded to `2024-03-15T00:00:00Z`.
     * The specified `date-time` value must respect the specified granularity:
     * - For `hourly`, consumption metrics are limited to the last 168 hours.
     * - For `daily`, consumption metrics are limited to the last 60 days.
     * - For `monthly`, consumption metrics are limited to the past year.
     *
     * @param data.granularity Specify the granularity of consumption metrics.
     * Hourly, daily, and monthly metrics are available for the last 168 hours, 60 days,
     * and 1 year, respectively.
     *
     * @param data.orgId Specify the organization for which the consumption metrics should be returned.
     * If this parameter is not provided, the endpoint will return the metrics for the
     * authenticated user's account.
     *
     * @param data.includeV1Metrics Include metrics utilized in previous pricing models.
     * - **data_storage_bytes_hour**: The sum of the maximum observed storage values for each hour
     * for each project, which never decreases.
     *
     * @returns ConsumptionHistoryPerAccountResponse Returned consumption metrics for the Neon account
     * @throws ApiError
     */
    public getConsumptionHistoryPerAccount(data: GetConsumptionHistoryPerAccountData): CancelablePromise<GetConsumptionHistoryPerAccountResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/consumption_history/account',
            query: {
                from: data.from,
                to: data.to,
                granularity: data.granularity,
                org_id: data.orgId,
                include_v1_metrics: data.includeV1Metrics
            },
            errors: {
                403: 'This endpoint is not available. It is only supported for Scale, Business, and Enterprise plan accounts.',
                404: 'Account is not a member of the organization specified by `org_id`.',
                406: `The specified \`date-time\` range is outside the boundaries of the specified \`granularity\`.
Adjust your \`from\` and \`to\` values or select a different \`granularity\`.
`,
                429: 'Too many requests',
                default: 'General Error'
            }
        });
    }
    
    /**
     * Retrieve project consumption metrics
     * Retrieves consumption metrics for Scale, Business, and Enterprise plan projects. History begins at the time of upgrade.
     * Issuing a call to this API does not wake a project's compute endpoint.
     *
     * @param data The data for the request.
     * @param data.from Specify the start `date-time` for the consumption period.
     * The `date-time` value is rounded according to the specified `granularity`.
     * For example, `2024-03-15T15:30:00Z` for `daily` granularity will be rounded to `2024-03-15T00:00:00Z`.
     * The specified `date-time` value must respect the specified `granularity`:
     * - For `hourly`, consumption metrics are limited to the last 168 hours.
     * - For `daily`, consumption metrics are limited to the last 60 days.
     * - For `monthly`, consumption metrics are limited to the last year.
     *
     * The consumption history is available starting from `March 1, 2024, at 00:00:00 UTC`.
     *
     * @param data.to Specify the end `date-time` for the consumption period.
     * The `date-time` value is rounded according to the specified granularity.
     * For example, `2024-03-15T15:30:00Z` for `daily` granularity will be rounded to `2024-03-15T00:00:00Z`.
     * The specified `date-time` value must respect the specified `granularity`:
     * - For `hourly`, consumption metrics are limited to the last 168 hours.
     * - For `daily`, consumption metrics are limited to the last 60 days.
     * - For `monthly`, consumption metrics are limited to the last year.
     *
     * @param data.granularity Specify the granularity of consumption metrics.
     * Hourly, daily, and monthly metrics are available for the last 168 hours, 60 days,
     * and 1 year, respectively.
     *
     * @param data.cursor Specify the cursor value from the previous response to get the next batch of projects.
     * @param data.limit Specify a value from 1 to 100 to limit number of projects in the response.
     * @param data.projectIds Specify a list of project IDs to filter the response.
     * If omitted, the response will contain all projects.
     * A list of project IDs can be specified as an array of parameter values or as a comma-separated list in a single parameter value.
     * - As an array of parameter values: `project_ids=cold-poetry-09157238%20&project_ids=quiet-snow-71788278`
     * - As a comma-separated list in a single parameter value: `project_ids=cold-poetry-09157238,quiet-snow-71788278`
     *
     * @param data.orgId Specify the organization for which the project consumption metrics should be returned.
     * If this parameter is not provided, the endpoint will return the metrics for the
     * authenticated user's projects.
     *
     * @param data.includeV1Metrics Include metrics utilized in previous pricing models.
     * - **data_storage_bytes_hour**: The sum of the maximum observed storage values for each hour,
     * which never decreases.
     *
     * @returns unknown Returned project consumption metrics for the Neon account
     * @throws ApiError
     */
    public getConsumptionHistoryPerProject(data: GetConsumptionHistoryPerProjectData): CancelablePromise<GetConsumptionHistoryPerProjectResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/consumption_history/projects',
            query: {
                cursor: data.cursor,
                limit: data.limit,
                project_ids: data.projectIds,
                from: data.from,
                to: data.to,
                granularity: data.granularity,
                org_id: data.orgId,
                include_v1_metrics: data.includeV1Metrics
            },
            errors: {
                403: 'This endpoint is not available. It is only supported with Scale, Business, and Enterprise plan accounts.',
                404: 'Account is not a member of the organization specified by `org_id`.',
                406: `The specified \`date-time\` range is outside the boundaries of the specified \`granularity\`.
Adjust your \`from\` and \`to\` values or select a different \`granularity\`.
`,
                429: 'Too many requests',
                default: 'General Error'
            }
        });
    }
    
}

export class OrganizationsService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Retrieve organization details
     * Retrieves information about the specified organization.
     *
     * @param data The data for the request.
     * @param data.orgId The Neon organization ID
     * @returns Organization Returned information about the organization
     * @throws ApiError
     */
    public getOrganization(data: GetOrganizationData): CancelablePromise<GetOrganizationResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/organizations/{org_id}',
            path: {
                org_id: data.orgId
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * List organization API keys
     * Retrieves the API keys for the specified organization.
     * The response does not include API key tokens. A token is only provided when creating an API key.
     * API keys can also be managed in the Neon Console.
     * For more information, see [Manage API keys](https://neon.tech/docs/manage/api-keys/).
     *
     * @param data The data for the request.
     * @param data.orgId The Neon organization ID
     * @returns OrgApiKeysListResponseItem Returned the API keys for the specified organization
     * @throws ApiError
     */
    public listOrgApiKeys(data: ListOrgApiKeysData): CancelablePromise<ListOrgApiKeysResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/organizations/{org_id}/api_keys',
            path: {
                org_id: data.orgId
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Create organization API key
     * Creates an API key for the specified organization.
     * The `key_name` is a user-specified name for the key.
     * This method returns an `id` and `key`. The `key` is a randomly generated, 64-bit token required to access the Neon API.
     * API keys can also be managed in the Neon Console.
     * See [Manage API keys](https://neon.tech/docs/manage/api-keys/).
     *
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.orgId The Neon organization ID
     * @returns OrgApiKeyCreateResponse Created an organization API key
     * @throws ApiError
     */
    public createOrgApiKey(data: CreateOrgApiKeyData): CancelablePromise<CreateOrgApiKeyResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/organizations/{org_id}/api_keys',
            path: {
                org_id: data.orgId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Revoke organization API key
     * Revokes the specified organization API key.
     * An API key that is no longer needed can be revoked.
     * This action cannot be reversed.
     * You can obtain `key_id` values by listing the API keys for an organization.
     * API keys can also be managed in the Neon Console.
     * See [Manage API keys](https://neon.tech/docs/manage/api-keys/).
     *
     * @param data The data for the request.
     * @param data.keyId The API key ID
     * @param data.orgId The Neon organization ID
     * @returns OrgApiKeyRevokeResponse Revoked the specified organization API key
     * @throws ApiError
     */
    public revokeOrgApiKey(data: RevokeOrgApiKeyData): CancelablePromise<RevokeOrgApiKeyResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/organizations/{org_id}/api_keys/{key_id}',
            path: {
                key_id: data.keyId,
                org_id: data.orgId
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Retrieve organization members details
     * Retrieves information about the specified organization members.
     *
     * @param data The data for the request.
     * @param data.orgId The Neon organization ID
     * @returns OrganizationMembersResponse Returned information about organization members
     * @throws ApiError
     */
    public getOrganizationMembers(data: GetOrganizationMembersData): CancelablePromise<GetOrganizationMembersResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/organizations/{org_id}/members',
            path: {
                org_id: data.orgId
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Retrieve organization member details
     * Retrieves information about the specified organization member.
     *
     * @param data The data for the request.
     * @param data.orgId The Neon organization ID
     * @param data.memberId The Neon organization member ID
     * @returns Member Returned information about the organization member
     * @throws ApiError
     */
    public getOrganizationMember(data: GetOrganizationMemberData): CancelablePromise<GetOrganizationMemberResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/organizations/{org_id}/members/{member_id}',
            path: {
                org_id: data.orgId,
                member_id: data.memberId
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Update role for organization member
     * Only an admin can perform this action.
     *
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.orgId The Neon organization ID
     * @param data.memberId The Neon organization member ID
     * @returns Member The updated organization member
     * @throws ApiError
     */
    public updateOrganizationMember(data: UpdateOrganizationMemberData): CancelablePromise<UpdateOrganizationMemberResponse> {
        return this.httpRequest.request({
            method: 'PATCH',
            url: '/organizations/{org_id}/members/{member_id}',
            path: {
                org_id: data.orgId,
                member_id: data.memberId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Remove member from the organization
     * Remove member from the organization.
     * Only an admin of the organization can perform this action.
     * If another admin is being removed, it will not be allows in case it is the only admin left in the organization.
     *
     * @param data The data for the request.
     * @param data.orgId The Neon organization ID
     * @param data.memberId The Neon organization member ID
     * @returns EmptyResponse Removed organization member
     * @throws ApiError
     */
    public removeOrganizationMember(data: RemoveOrganizationMemberData): CancelablePromise<RemoveOrganizationMemberResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/organizations/{org_id}/members/{member_id}',
            path: {
                org_id: data.orgId,
                member_id: data.memberId
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Retrieve organization invitation details
     * Retrieves information about extended invitations for the specified organization
     *
     * @param data The data for the request.
     * @param data.orgId The Neon organization ID
     * @returns OrganizationInvitationsResponse Returned information about the organization invitations
     * @throws ApiError
     */
    public getOrganizationInvitations(data: GetOrganizationInvitationsData): CancelablePromise<GetOrganizationInvitationsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/organizations/{org_id}/invitations',
            path: {
                org_id: data.orgId
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Create organization invitations
     * Creates invitations for a specific organization.
     * If the invited user has an existing account, they automatically join as a member.
     * If they don't yet have an account, they are invited to create one, after which they become a member.
     * Each invited user receives an email notification.
     *
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.orgId The Neon organization ID
     * @returns OrganizationInvitationsResponse The created organization invitation
     * @throws ApiError
     */
    public createOrganizationInvitations(data: CreateOrganizationInvitationsData): CancelablePromise<CreateOrganizationInvitationsResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/organizations/{org_id}/invitations',
            path: {
                org_id: data.orgId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Transfer projects between organizations
     * Transfers selected projects, identified by their IDs, from your organization to another specified organization.
     *
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.sourceOrgId The Neon organization ID (source org, which currently owns the project)
     * @returns EmptyResponse Projects successfully transferred from organization to organization
     * @throws ApiError
     */
    public transferProjectsFromOrgToOrg(data: TransferProjectsFromOrgToOrgData): CancelablePromise<TransferProjectsFromOrgToOrgResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/organizations/{source_org_id}/projects/transfer',
            path: {
                source_org_id: data.sourceOrgId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                406: 'Transfer failed - the target organization has too many projects or its plan is incompatible with the source organization. Reduce projects or upgrade the organization.',
                422: 'One or more of the provided project IDs have GitHub or Vercel integrations installed. Transferring integration projects is currently not supported',
                default: 'General Error'
            }
        });
    }
    
    /**
     * List VPC endpoints
     * Retrieves the list of VPC endpoints for the specified Neon organization.
     *
     * @param data The data for the request.
     * @param data.orgId The Neon organization ID
     * @param data.regionId The Neon region ID
     * @returns VPCEndpointsResponse The list of configured VPC endpoint IDs for the specified organization
     * @throws ApiError
     */
    public listOrganizationVpcEndpoints(data: ListOrganizationVpcEndpointsData): CancelablePromise<ListOrganizationVpcEndpointsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/organizations/{org_id}/vpc/region/{region_id}/vpc_endpoints',
            path: {
                org_id: data.orgId,
                region_id: data.regionId
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Retrieve VPC endpoint details
     * Retrieves the current state and configuration details of a specified VPC endpoint.
     *
     * @param data The data for the request.
     * @param data.orgId The Neon organization ID
     * @param data.regionId The Neon region ID.
     * Azure regions are currently not supported.
     *
     * @param data.vpcEndpointId The VPC endpoint ID
     * @returns VPCEndpointDetails Returned the current status and configuration details of the specified VPC endpoint.
     * @throws ApiError
     */
    public getOrganizationVpcEndpointDetails(data: GetOrganizationVpcEndpointDetailsData): CancelablePromise<GetOrganizationVpcEndpointDetailsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/organizations/{org_id}/vpc/region/{region_id}/vpc_endpoints/{vpc_endpoint_id}',
            path: {
                org_id: data.orgId,
                region_id: data.regionId,
                vpc_endpoint_id: data.vpcEndpointId
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Assign or update VPC endpoint
     * Assigns a VPC endpoint to a Neon organization or updates its existing assignment.
     *
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.orgId The Neon organization ID
     * @param data.regionId The Neon region ID.
     * Azure regions are currently not supported.
     *
     * @param data.vpcEndpointId The VPC endpoint ID
     * @returns unknown Assigned the VPC endpoint to the specified Neon organization
     * @throws ApiError
     */
    public assignOrganizationVpcEndpoint(data: AssignOrganizationVpcEndpointData): CancelablePromise<AssignOrganizationVpcEndpointResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/organizations/{org_id}/vpc/region/{region_id}/vpc_endpoints/{vpc_endpoint_id}',
            path: {
                org_id: data.orgId,
                region_id: data.regionId,
                vpc_endpoint_id: data.vpcEndpointId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Delete VPC endpoint
     * Deletes the VPC endpoint from the specified Neon organization.
     *
     * @param data The data for the request.
     * @param data.orgId The Neon organization ID
     * @param data.regionId The Neon region ID.
     * Azure regions are currently not supported.
     *
     * @param data.vpcEndpointId The VPC endpoint ID
     * @returns unknown Deleted the VPC endpoint from the specified Neon organization
     * @throws ApiError
     */
    public deleteOrganizationVpcEndpoint(data: DeleteOrganizationVpcEndpointData): CancelablePromise<DeleteOrganizationVpcEndpointResponse> {
        return this.httpRequest.request({
            method: 'DELETE',
            url: '/organizations/{org_id}/vpc/region/{region_id}/vpc_endpoints/{vpc_endpoint_id}',
            path: {
                org_id: data.orgId,
                region_id: data.regionId,
                vpc_endpoint_id: data.vpcEndpointId
            },
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Retrieve current user organizations list
     * Retrieves information about the current Neon user's organizations
     *
     * @returns OrganizationsResponse Returned information about the current user organizations
     *
     * @throws ApiError
     */
    public getCurrentUserOrganizations(): CancelablePromise<GetCurrentUserOrganizationsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/users/me/organizations',
            errors: {
                default: 'General Error'
            }
        });
    }
    
}

export class RegionService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * List supported regions
     * Lists supported Neon regions
     *
     * @returns ActiveRegionsResponse The list of active regions
     * @throws ApiError
     */
    public getActiveRegions(): CancelablePromise<GetActiveRegionsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/regions',
            errors: {
                default: 'General Error'
            }
        });
    }
    
}

export class UsersService {
    constructor(public readonly httpRequest: BaseHttpRequest) { }
    
    /**
     * Retrieve current user details
     * Retrieves information about the current Neon user account.
     *
     * @returns CurrentUserInfoResponse Returned information about the current user
     *
     * @throws ApiError
     */
    public getCurrentUserInfo(): CancelablePromise<GetCurrentUserInfoResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/users/me',
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Retrieve current user organizations list
     * Retrieves information about the current Neon user's organizations
     *
     * @returns OrganizationsResponse Returned information about the current user organizations
     *
     * @throws ApiError
     */
    public getCurrentUserOrganizations(): CancelablePromise<GetCurrentUserOrganizationsResponse> {
        return this.httpRequest.request({
            method: 'GET',
            url: '/users/me/organizations',
            errors: {
                default: 'General Error'
            }
        });
    }
    
    /**
     * Transfer projects from personal account to organization
     * Transfers selected projects, identified by their IDs, from your personal account to a specified organization.
     *
     * @param data The data for the request.
     * @param data.requestBody
     * @returns EmptyResponse Projects successfully transferred from personal account to organization
     * @throws ApiError
     */
    public transferProjectsFromUserToOrg(data: TransferProjectsFromUserToOrgData): CancelablePromise<TransferProjectsFromUserToOrgResponse> {
        return this.httpRequest.request({
            method: 'POST',
            url: '/users/me/projects/transfer',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                406: 'Transfer failed - the target organization has too many projects or its plan is incompatible with the source account. Reduce the number of projects or upgrade the target organization to increase its capacity.',
                422: 'One or more of the provided project IDs have GitHub or Vercel integrations installed. Transferring integration projects is currently not supported',
                default: 'General Error'
            }
        });
    }
    
}